sharp.null.hypothesis <- replicate(10000, get_null_ATE_from_current_sample(d, control_treatment, column))
ATE <- get_ATE(d, column)
p_value <- mean(ATE <= sharp.null.hypothesis)
plot(density(sharp.null.hypothesis),  main = paste('Sample_size: ', sample_size), cex.main= 0.8)
abline(v = ATE, col = "blue")
}
sample_size <- length(d[[column]])
par(mfrow=c(1,1))
for (column in columns_to_analyse[1]){
sharp.null.hypothesis <- replicate(10000, get_null_ATE_from_current_sample(d, control_treatment, column))
ATE <- get_ATE(d, column)
p_value <- mean(ATE <= sharp.null.hypothesis)
plot(density(sharp.null.hypothesis),  main = paste('Samp: ', sample_size, ' ATE: ', round(ATE, 3),
'p-value :', round(p_value, 3)), cex.main= 0.8,
xlab=column)
abline(v = ATE, col = "blue")
}
par(mfrow=c(2,2))
for (column in columns_to_analyse){
sharp.null.hypothesis <- replicate(10000, get_null_ATE_from_current_sample(d, control_treatment, column))
ATE <- get_ATE(d, column)
p_value <- mean(ATE <= sharp.null.hypothesis)
plot(density(sharp.null.hypothesis),  main = paste('Samp: ', sample_size, ' ATE: ', round(ATE, 3),
'p-value :', round(p_value, 3)), cex.main= 0.8,
xlab=column)
abline(v = ATE, col = "blue")
}
library(ggplot2)
raw_data <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_July 19, 2017_22.18.csv')
library(dplyr)
library(ggplot2)
#Change Directory
raw_data <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_July 19, 2017_22.18.csv')
raw_data$RecordedDate <- as.POSIXct(strptime(as.character(raw_data$RecordedDate), '%Y-%m-%d %H:%M:%S'))
#First Filter out junk data
data <- raw_data %>%
filter(Finished == 'True',
Status == 'IP Address',
Welcome == 'I agree',
Group != '',
AudioCheck == 'Pineapple',
RecordedDate > '2017-07-16 01:00:00')
interesting_columns <- c('Race','Age','Gender','Location','Group')
summary(data[,interesting_columns])
percent_table <- function(column){
print(head(sort(table(sort(column))/length(column), decreasing = TRUE)))
}
percent_table(data$Race)
qplot(data$Age, geom = 'bar', fill = 'b', main = 'Bar plot of Age')
#INSERT CODE TO ROTATE LOCATIONS
qplot(data$Location, geom = 'bar', fill = 'r', main = 'Bar Plot of Location')
#Rotate Race
qplot(data$Race, geom = 'bar', fill= 'g', main = 'Bar Plot of Race')
personal_views <- c('Personal_Views_Confident',
'Personal_Views_Beautiful',
'Personal_Views_Beauty_Importance',
'Personal_Views_Relate_To_Model')
summary(data[,personal_views])
print('Confidence')
percent_table(data$Personal_Views_Confident)
percent_table(data$Personal_Views_Beautiful)
print('Beauty Importance')
percent_table(data$Personal_Views_Beauty_Importance)
print('Relate to Model')
percent_table(data$Personal_Views_Relate_To_Model)
recode <- function(field){
out <- 0
if(field == 'Agree'){
out <- 1
} else if(field == 'Strongly agree'){
out <- 2
} else if(field == 'Disagree'){
out <- -1
} else if(field == 'Strongly disagree'){
out <- -2
}
out <- as.numeric(out)
return(out)
}
data$Beautiful <- sapply(data$Personal_Views_Beautiful, FUN =  recode)
data$Confident <- sapply(data$Personal_Views_Confident, FUN =  recode)
data$Importance <- sapply(data$Personal_Views_Beauty_Importance, FUN =  recode)
data$Relate <- sapply(data$Personal_Views_Relate_To_Model, FUN =  recode)
qplot(data = data, x = Confident, fill = Gender, main = 'Confidence Split by Gender' )
conf_analysis <- data %>% group_by(Gender,Confident) %>% summarize(cnt = n())
qplot(data = conf_analysis, x = Gender, y = Confident, size = cnt, color = cnt)
print(paste('Male Conf', mean(data$Confident[data$Gender=='Male'])))
print(paste('Female Conf', mean(data$Confident[data$Gender=='Female'])))
qplot(data$Confident, data$Beautiful)
cor.test(data$Confident,data$Beautiful)
chisq.test(data$Confident, data$Beautiful)
cor.test(data$Relate, data$Beautiful )
treat <- filter(data, Group == 'Treatment')
control <- filter(data, Group == 'Control')
ate_Beautiful <- mean(treat$Beautiful) - mean(control$Beautiful)
ate_Confident <- mean(treat$Confident) - mean(control$Confident)
ate_Importance <- mean(treat$Importance) - mean(control$Importance)
ate_Relate <- mean(treat$Relate) - mean(control$Relate)
#
n <- 1e4
copy <- data
taus <- data.frame(matrix(NA, nrow = n, ncol = 4))
names(taus) <- c('Beauty','Confidence','Importance','Relate')
for(i in 1:n){
copy$Group <- sample(data$Group)
treat <- filter(copy, Group == 'Treatment')
control <- filter(copy, Group == 'Control')
taus[i,1] <- mean(treat$Beautiful) - mean(control$Beautiful)
taus[i,2] <- mean(treat$Confident) - mean(control$Confident)
taus[i,3] <- mean(treat$Importance) - mean(control$Importance)
taus[i,4] <- mean(treat$Relate) - mean(control$Relate)
}
p_beauty <- sum(taus$Beauty > ate_Beautiful)/n
p_confident <- sum(taus$Confidence > ate_Confident)/n
p_relate <- sum(taus$Relate > ate_Relate)/n
p_importance <- sum(taus$Importance > ate_Importance)/n
print(paste('Pval Beauty',p_beauty))
print(paste('Pval Confident', p_confident))
print(paste('Pval Relate', p_relate))
print(paste('Pval Important', p_importance))
qplot(taus$Beauty, bins = 30, main = paste('RI for Beauty Pvalue =', p_beauty)) + geom_vline(xintercept = ate_Beautiful)
qplot(taus$Confidence, bins = 30, main = paste('RI for Confidence Pvalue =',p_confident)) + geom_vline(xintercept = ate_Confident)
qplot(taus$Importance, bins = 30, main = paste('RI for Importance Pvalue =',p_importance)) + geom_vline(xintercept = ate_Importance)
qplot(taus$Relate, bins = 30, main = paste('RI for Relating Pvalue =',p_relate)) + geom_vline(xintercept = ate_Relate)
qplot(taus$Beauty, bins = 30, main = paste('RI for Beauty Pvalue =', p_beauty)) + geom_vline(xintercept = ate_Beautiful)
qplot(taus$Confidence, bins = 30, main = paste('RI for Confidence Pvalue =',p_confident)) + geom_vline(xintercept = ate_Confident)
qplot(taus$Importance, bins = 30, main = paste('RI for Importance Pvalue =',p_importance)) + geom_vline(xintercept = ate_Importance)
qplot(taus$Relate, bins = 30, main = paste('RI for Relating Pvalue =',p_relate)) + geom_vline(xintercept = ate_Relate)
qplot(taus$Beauty, bins = 30, main = paste('RI for Beauty Pvalue =', p_beauty)) + geom_vline(xintercept = ate_Beautiful)
qplot(taus$Confidence, bins = 30, main = paste('RI for Confidence Pvalue =',p_confident)) + geom_vline(xintercept = ate_Confident)
qplot(taus$Importance, bins = 30, main = paste('RI for Importance Pvalue =',p_importance)) + geom_vline(xintercept = ate_Importance)
qplot(taus$Relate, bins = 30, main = paste('RI for Relating Pvalue =',p_relate)) + geom_vline(xintercept = ate_Relate)
m_beauty <- lm(data = data, Beautiful ~ Group)
summary(m_beauty)
m_confident <- lm(data = data, Confident ~ Group)
summary(m_confident)
m_importance <- lm(data = data, Importance ~ Group)
summary(m_importance)
m_relate <- lm(data = data, Relate ~ Group)
summary(m_relate)
m_beauty <- lm(data = data, Beautiful ~ Group + Gender)
summary(m_beauty)
m_confident <- lm(data = data, Confident ~ Group + Gender)
summary(m_confident)
m_importance <- lm(data = data, Importance ~ Group + Gender)
summary(m_importance)
m_relate <- lm(data = data, Relate ~ Group + Gender)
summary(m_relate)
View(data)
# Correct column names misspellings
d <- dplyr::rename(d, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Combine and recode randomization 1 & 2 for the images
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
for (image in images){
for (question in questions){
column1 <- paste(image, question, '1', sep = "")
data[[column1]] <- ifelse(data[[column1]] == 'Ad 1', 2, ifelse(data[[column1]] == 'Ad 2', 1, 0))
column2 <- paste(image, question, '2', sep = "")
data[[column2]] <- ifelse(data[[column2]] == 'Ad 2', 2, ifelse(data[[column2]] == 'Ad 1', 1, 0))
new_column <- paste(image, question, sep ="")
data[[new_column]] <- data[[column1]] + data[[column2]] - 1
data[[new_column]] <- ifelse(data[[new_column]] == -1, NA, data[[new_column]])
}
}
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
for (image in images){
for (question in questions){
column <- paste(image, question, sep = "")
l1 <- lm(data[[column]] ~ data[['Group']])
print(column)
print(summary(l1))
}
}
print(summary(l1))
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
for (question in questions){
question_average <- paste(question, 'average', sep = "")
data[[question_average]] <- rep(0, nrow(data))
for (image in images){
column <- paste(image, question, sep = "")
data[[question_average]] <- data[[question_average]] + data[[column]]
}
}
for (question in questions){
question_average <- paste(question, 'average', sep = "")
print(question_average)
print(summary(data[[question_average]]))
l1 <- lm(data[[question_average]] ~ data[['Group']] + data$Gender)
print(summary(l1))
}
library(dplyr)
library(ggplot2)
#Change Directory
raw_data <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_July 19, 2017_22.18.csv')
raw_data <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_July 19, 2017_22.18.csv')
#First Filter out junk data
filter_data <- function(raw_data) {
raw_data$RecordedDate <- as.POSIXct(strptime(as.character(raw_data$RecordedDate), '%Y-%m-%d %H:%M:%S'))
data <- raw_data %>%
filter(Finished == 'True',
Status == 'IP Address',
Welcome == 'I agree',
Group != '',
AudioCheck == 'Pineapple',
RecordedDate > '2017-07-16 01:00:00')
}
data <- filter_data(raw_data)
raw_data2 <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_August 12, 2017_21.50.csv')
View(raw_data2)
data2 <- filter_data(raw_data2)
data2 <- filter(data2, RecordedDate > '2017-08-10 00:00:00')
data2$Beautiful <- sapply(data2$Personal_Views_Beautiful, FUN =  recode)
data2$Confident <- sapply(data2$Personal_Views_Confident, FUN =  recode)
data2$Importance <- sapply(data2$Personal_Views_Beauty_Importance, FUN =  recode)
data2$Relate <- sapply(data2$Personal_Views_Relate_To_Model, FUN =  recode)
# Combine and recode randomization 1 & 2 for the images
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
recode_image <- function(data) {
# Correct column names misspellings
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Recode image output to one column
for (image in images){
for (question in questions){
column1 <- paste(image, question, '1', sep = "")
data[[column1]] <- ifelse(data[[column1]] == 'Ad 1', 2, ifelse(data[[column1]] == 'Ad 2', 1, 0))
column2 <- paste(image, question, '2', sep = "")
data[[column2]] <- ifelse(data[[column2]] == 'Ad 2', 2, ifelse(data[[column2]] == 'Ad 1', 1, 0))
new_column <- paste(image, question, sep ="")
data[[new_column]] <- data[[column1]] + data[[column2]] - 1
data[[new_column]] <- ifelse(data[[new_column]] == -1, NA, data[[new_column]])
}
}
}
data <- recode_image(data)
library(dplyr)
library(ggplot2)
#Change Directory
raw_data <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_July 19, 2017_22.18.csv')
#First Filter out junk data
filter_data <- function(raw_data) {
raw_data$RecordedDate <- as.POSIXct(strptime(as.character(raw_data$RecordedDate), '%Y-%m-%d %H:%M:%S'))
data <- raw_data %>%
filter(Finished == 'True',
Status == 'IP Address',
Welcome == 'I agree',
Group != '',
AudioCheck == 'Pineapple',
RecordedDate > '2017-07-16 01:00:00')
}
data <- filter_data(raw_data)
# Combine and recode randomization 1 & 2 for the images
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
recode_image <- function(data) {
# Correct column names misspellings
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Recode image output to one column
for (image in images){
for (question in questions){
column1 <- paste(image, question, '1', sep = "")
data[[column1]] <- ifelse(data[[column1]] == 'Ad 1', 2, ifelse(data[[column1]] == 'Ad 2', 1, 0))
column2 <- paste(image, question, '2', sep = "")
data[[column2]] <- ifelse(data[[column2]] == 'Ad 2', 2, ifelse(data[[column2]] == 'Ad 1', 1, 0))
new_column <- paste(image, question, sep ="")
data[[new_column]] <- data[[column1]] + data[[column2]] - 1
data[[new_column]] <- ifelse(data[[new_column]] == -1, NA, data[[new_column]])
}
}
}
data <- recode_image(data)
library(dplyr)
library(ggplot2)
#Change Directory
raw_data <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_July 19, 2017_22.18.csv')
#First Filter out junk data
filter_data <- function(raw_data) {
raw_data$RecordedDate <- as.POSIXct(strptime(as.character(raw_data$RecordedDate), '%Y-%m-%d %H:%M:%S'))
data <- raw_data %>%
filter(Finished == 'True',
Status == 'IP Address',
Welcome == 'I agree',
Group != '',
AudioCheck == 'Pineapple',
RecordedDate > '2017-07-16 01:00:00')
}
data <- filter_data(raw_data)
# Combine and recode randomization 1 & 2 for the images
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
recode_image <- function(data) {
# Correct column names misspellings
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Recode image output to one column
for (image in images){
for (question in questions){
column1 <- paste(image, question, '1', sep = "")
data[[column1]] <- ifelse(data[[column1]] == 'Ad 1', 2, ifelse(data[[column1]] == 'Ad 2', 1, 0))
column2 <- paste(image, question, '2', sep = "")
data[[column2]] <- ifelse(data[[column2]] == 'Ad 2', 2, ifelse(data[[column2]] == 'Ad 1', 1, 0))
new_column <- paste(image, question, sep ="")
data[[new_column]] <- data[[column1]] + data[[column2]] - 1
data[[new_column]] <- ifelse(data[[new_column]] == -1, NA, data[[new_column]])
return(data)
}
}
}
data <- recode_image(data)
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
recode_image <- function(data) {
# Correct column names misspellings
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Recode image output to one column
for (image in images){
for (question in questions){
column1 <- paste(image, question, '1', sep = "")
data[[column1]] <- ifelse(data[[column1]] == 'Ad 1', 2, ifelse(data[[column1]] == 'Ad 2', 1, 0))
column2 <- paste(image, question, '2', sep = "")
data[[column2]] <- ifelse(data[[column2]] == 'Ad 2', 2, ifelse(data[[column2]] == 'Ad 1', 1, 0))
new_column <- paste(image, question, sep ="")
data[[new_column]] <- data[[column1]] + data[[column2]] - 1
data[[new_column]] <- ifelse(data[[new_column]] == -1, NA, data[[new_column]])
return(data)
}
}
}
View(data)
# Combine and recode randomization 1 & 2 for the images
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
# Correct column names misspellings
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
#First Filter out junk data
filter_data <- function(raw_data) {
raw_data$RecordedDate <- as.POSIXct(strptime(as.character(raw_data$RecordedDate), '%Y-%m-%d %H:%M:%S'))
data <- raw_data %>%
filter(Finished == 'True',
Status == 'IP Address',
Welcome == 'I agree',
Group != '',
AudioCheck == 'Pineapple',
RecordedDate > '2017-07-16 01:00:00')
}
data <- filter_data(raw_data)
# Combine and recode randomization 1 & 2 for the images
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
# Correct column names misspellings
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Recode image output to one column
for (image in images){
for (question in questions){
column1 <- paste(image, question, '1', sep = "")
data[[column1]] <- ifelse(data[[column1]] == 'Ad 1', 2, ifelse(data[[column1]] == 'Ad 2', 1, 0))
column2 <- paste(image, question, '2', sep = "")
data[[column2]] <- ifelse(data[[column2]] == 'Ad 2', 2, ifelse(data[[column2]] == 'Ad 1', 1, 0))
new_column <- paste(image, question, sep ="")
data[[new_column]] <- data[[column1]] + data[[column2]] - 1
data[[new_column]] <- ifelse(data[[new_column]] == -1, NA, data[[new_column]])
}
}
raw_data2 <- read.csv('/Users/ozimmer/GoogleDrive/berkeley/w241/BeatuyAd_CausalExperiment/Data/BeautyAds_August 12, 2017_21.50.csv')
data2 <- filter_data(raw_data2)
data2 <- filter(data2, RecordedDate > '2017-08-10 00:00:00')
data2$Beautiful <- sapply(data2$Personal_Views_Beautiful, FUN =  recode)
data2$Confident <- sapply(data2$Personal_Views_Confident, FUN =  recode)
data2$Importance <- sapply(data2$Personal_Views_Beauty_Importance, FUN =  recode)
data2$Relate <- sapply(data2$Personal_Views_Relate_To_Model, FUN =  recode)
# Combine and recode randomization 1 & 2 for the images
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
randomization <- c('1', '2')
# Correct column names misspellings
data <- dplyr::rename(data, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Correct column names misspellings
data2 <- dplyr::rename(data2, Coffee_validate_1 = Coffe_validate_1,
Fit_i_identify_1 = FIt_i_identify_1,
Work_i_identify_2 = work_i_identify_2)
# Recode image output to one column
for (image in images){
for (question in questions){
column1 <- paste(image, question, '1', sep = "")
data2[[column1]] <- ifelse(data2[[column1]] == 'Ad 1', 2, ifelse(data2[[column1]] == 'Ad 2', 1, 0))
column2 <- paste(image, question, '2', sep = "")
data2[[column2]] <- ifelse(data2[[column2]] == 'Ad 2', 2, ifelse(data2[[column2]] == 'Ad 1', 1, 0))
new_column <- paste(image, question, sep ="")
data2[[new_column]] <- data2[[column1]] + data2[[column2]] - 1
data2[[new_column]] <- ifelse(data2[[new_column]] == -1, NA, data2[[new_column]])
}
}
columns_to_analyse <- c('Personal_Views_Confident', 'Personal_Views_Beautiful',
'Personal_Views_Beauty_Importance', 'Personal_Views_Relate_To_Model')
for (column in columns_to_analyse){
l1 <- lm(d[[column]] ~ d[['Group']])
print(column)
print(coef(summary(l1))[2,])
}
columns_to_analyse <- c('Personal_Views_Confident', 'Personal_Views_Beautiful',
'Personal_Views_Beauty_Importance', 'Personal_Views_Relate_To_Model')
for (column in columns_to_analyse){
l1 <- lm(data2[[column]] ~ data2[['Group']])
print(column)
print(coef(summary(l1))[2,])
}
View(data2)
View(data2)
columns_to_analyse <- c('Beautiful', 'Confident', 'Importance', 'Relate')
for (column in columns_to_analyse){
l1 <- lm(data2[[column]] ~ data2[['Group']])
print(column)
print(coef(summary(l1))[2,])
}
columns_to_analyse <- c('Beautiful', 'Confident', 'Importance', 'Relate')
for (column in columns_to_analyse){
l1 <- lm(data2[[column]] ~ data2[['Group']] +  + Gender)
print(column)
summary(l1)
#print(coef(summary(l1))[2,])
}
columns_to_analyse <- c('Beautiful', 'Confident', 'Importance', 'Relate')
for (column in columns_to_analyse){
l1 <- lm(data2[[column]] ~ data2[['Group']] + Gender)
print(column)
summary(l1)
#print(coef(summary(l1))[2,])
}
columns_to_analyse <- c('Beautiful', 'Confident', 'Importance', 'Relate')
for (column in columns_to_analyse){
l1 <- lm(data2[[column]] ~ data2[['Group']] + data2[['Gender']])
print(column)
summary(l1)
#print(coef(summary(l1))[2,])
}
columns_to_analyse <- c('Beautiful', 'Confident', 'Importance', 'Relate')
for (column in columns_to_analyse){
l1 <- lm(data2[[column]] ~ data2[['Group']] + data2[['Gender']])
print(column)
print(summary(l1))
#print(coef(summary(l1))[2,])
}
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
for (image in images){
for (question in questions){
column <- paste(image, question, sep = "")
l1 <- lm(data2[[column]] ~ data2[['Group']])
print(column)
print(summary(l1))
}
}
questions <- c('_i_identify_', '_i_prefer_', '_o_prefer_', '_validate_')
images <- c('Passion', 'Coffee', 'Couple', 'Work', 'Fit')
for (question in questions){
question_average <- paste(question, 'average', sep = "")
data2[[question_average]] <- rep(0, nrow(data2))
for (image in images){
column <- paste(image, question, sep = "")
data2[[question_average]] <- data2[[question_average]] + data2[[column]]
}
}
for (question in questions){
question_average <- paste(question, 'average', sep = "")
print(question_average)
print(summary(data2[[question_average]]))
l1 <- lm(data2[[question_average]] ~ data2[['Group']] + data2$Gender)
print(summary(l1))
}
stargazer(m_beauty, m_confident, m_importance, m_relate, fb_lm00, header=F)
library(stargazer)
stargazer(m_beauty, m_confident, m_importance, m_relate, fb_lm00, header=F)
stargazer(m_beauty, m_confident, m_importance, m_relate, header=F)
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
library(devtools)
install.packages('devtools')
library(devtools)
devtools::install_github("rstudio/rmarkdown")
a <- 4
b <- 5
a + b
a <- ?range
?range
